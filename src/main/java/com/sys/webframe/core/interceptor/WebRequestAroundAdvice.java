package com.sys.webframe.core.interceptor;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import javax.servlet.http.HttpServletRequest;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.AfterReturning;import org.aspectj.lang.annotation.AfterThrowing;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;import org.slf4j.Logger;import org.springframework.web.context.request.RequestAttributes;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes;@Aspectpublic class WebRequestAroundAdvice {	private static final Logger logger = org.slf4j.LoggerFactory.getLogger(WebRequestAroundAdvice.class);	private static Map<Integer, String> sessionMap = new ConcurrentHashMap<>();	@Pointcut("execution(* com.yc.rm.caas.appserver.base.privilege.controller.*.*(..)) || execution(* com.yc.rm.caas.appserver.bus.controller.team.*.*(..))")	private void anyMethod() {	}// 定义一个切入点	@Pointcut("execution(* com.yc.rm.caas.appserver.base.login.controller.*.login(..))")	private void loginMethod() {	}// 定义一个切入点	@Pointcut("execution(* com.yc.rm.caas.appserver.base.login.controller.*.loginOut(..))")	private void loginOutMethod() {	}	@Before("anyMethod() && loginMethod() && loginOutMethod() && args(name)")	public void doAccessCheck(String name) {		logger.debug(name);		logger.debug("前置通知");	}	@AfterReturning("anyMethod() && loginMethod() && loginOutMethod()")	public void doAfter() {		logger.debug("后置通知");	}	@After("anyMethod() && loginMethod()")	public void after() {		logger.debug("最终通知");	}	@AfterThrowing("anyMethod() && loginMethod() && loginOutMethod()")	public void doAfterThrow() {		logger.debug("例外通知");	}	@Around("anyMethod()")	public Object doBasicProfiling(ProceedingJoinPoint pjp) {		logger.debug("进入环绕通知");		RequestAttributes ra = RequestContextHolder.getRequestAttributes();		ServletRequestAttributes sra = (ServletRequestAttributes) ra;		HttpServletRequest request = sra.getRequest();		logger.debug("request " + request + " sessionid:" + request.getSession().getId());		HttpMsgBean bean = new HttpMsgBean();		Object object;		if (sessionMap.containsValue(request.getSession().getId())) {			// 存在sessionId，登陆过。			Object[] objs = pjp.getArgs();			object = null;			try {				object = pjp.proceed();// 执行该方法				if (objs != null && objs.length > 0) {					logger.debug(object.toString());					bean.setParameter(objs[0]);				}				bean.setSuccess(1);				bean.setResult(object);			} catch (Throwable e) {				bean.setResult("请求接口出现异常");				e.printStackTrace();			}		} else {			object = "账号在其他地点登录";			bean.setResult(object);			bean.setSuccess(0);		}		logger.debug("退出方法");		bean.setMethod(request.getRequestURI());		bean.setTime(System.currentTimeMillis() / 1000);		return bean;	}	@Around("loginMethod()")	public Object doLoginProfiling(ProceedingJoinPoint pjp) throws Throwable {		logger.debug("进入doLoginProfiling环绕通知");		Object object = pjp.proceed();// 执行该方法		logger.debug(object.toString());		// 用户名密码校验通过，开始判断单点登录		RequestAttributes ra = RequestContextHolder.getRequestAttributes();		ServletRequestAttributes sra = (ServletRequestAttributes) ra;		HttpServletRequest request = sra.getRequest();		Object[] objs = pjp.getArgs();		Object obj = objs[0];		String sessionId = request.getSession().getId();		request.getSession().setAttribute("user", object);		logger.debug("request " + request + " sessionid:" + request.getRequestedSessionId());		return object;	}	@Around("loginOutMethod()")	private Object doLoginOutProfiling(ProceedingJoinPoint pjp) throws Throwable {		RequestAttributes ra = RequestContextHolder.getRequestAttributes();		ServletRequestAttributes sra = (ServletRequestAttributes) ra;		HttpServletRequest request = sra.getRequest();		Object object = pjp.proceed();		int result = 0;		try {			request.getSession().removeAttribute("user");			result = 1;		} catch (Exception e) {			result = -1;		}		return result;	}}